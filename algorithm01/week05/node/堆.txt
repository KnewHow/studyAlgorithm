堆:
	1:引子
		1.1在一个操作系统中，CPU如何处理进程。如果按照时间先后排序，那么
			对优先权较高的线程来说，就会出现问题。我们必须建立一种组织方式
			假设我们每次从"队列"里面取出的元素，是按照优先权大小，而不是如"队列"
			的时间顺序，如何进行组织？
		
		1.2比较我们之前使用过的几种数据结构
			1.2.1 数组
				插入：总是在最后，时间复杂度为O(1)
				删除：
					查找最大或者最小元素，时间复杂度为O(n)
					删除找到的最大最小元素，时间复杂度为O(n)
			
			1.2.2 链表
				插入：总是插入在链表的头部 时间复杂度O(1)
				删除：
					查找到最大或者最小元素，时间复杂度O(n)
					删除元素，时间复杂度O(1)
			
			1.2.3 有序数组
				插入：
					找到合适位置，时间复杂度O(n)或者O(log2 N)
					移动元素位置：O(n)
				删除：删去最后一个元素
			
			1.2.4 有序链表
				插入：找到合适的位置，时间复杂度O(n)
				删除：删除首元素或者尾元素，时间复杂度O(1)
			
		
		上面的数据结构至少都需要O(n)的时间复杂度，不是我们所需要的
		我们使用二叉搜索树看看怎么样。


			1.2.5 二叉搜索树
				插入：找到元素的位置 时间复制度O(log2 N)
				删除：最大最小元素在二叉搜索树的最左边或者最右边，时间复杂度O(log2 N)

				这么一看，感觉还是可以的，但是我们发现，我们每次删除的都是最大(最小)元素
				那么如果一直这么操作，这棵树会歪掉。我们得重新定义树的结构要求。